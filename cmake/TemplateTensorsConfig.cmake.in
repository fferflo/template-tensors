get_filename_component(TemplateTensors_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)

if(NOT TARGET TemplateTensors::base)
  set(CMAKE_MODULE_PATH "${CMAKE_MODULE_PATH};${TemplateTensors_CMAKE_DIR}/modules")

  if(NOT DEFINED OpenGL_GL_PREFERENCE)
    set(OpenGL_GL_PREFERENCE GLVND)
  endif()
  if(NOT DEFINED Python3_FIND_STRATEGY)
    set(Python3_FIND_STRATEGY LOCATION)
  endif()

  find_package(OpenCV QUIET)
  find_package(Eigen3 QUIET)
  find_package(PCL COMPONENTS io common kdtree QUIET)
  find_package(tf QUIET)
  find_package(tf2 QUIET)
  find_package(FreeImage QUIET)
  find_package(sensor_msgs QUIET)
  find_package(CUDNN QUIET)
  find_package(CUDAToolkit QUIET)
  find_package(tinyply QUIET)
  find_package(Python3 COMPONENTS Interpreter Development QUIET)
  find_package(Boost COMPONENTS python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR} QUIET)
  if(NOT Boost_python${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}_FOUND)
    find_package(Boost COMPONENTS python QUIET)
  endif()
  find_package(Boost COMPONENTS numpy${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR} QUIET)
  if(NOT Boost_numpy${Python3_VERSION_MAJOR}${Python3_VERSION_MINOR}_FOUND)
    find_package(Boost COMPONENTS numpy QUIET)
  endif()
  find_package(OpenMP QUIET)
  find_package(SOIL QUIET)
  find_package(TBB QUIET)
  find_package(OpenGL QUIET)
  find_package(dlpack QUIET)
  find_package(NVOF QUIET)
  find_package(cnpy QUIET)
  find_package(orocos_kdl QUIET)
  find_package(cereal QUIET)
  find_package(cppflow QUIET)
  find_package(g2o QUIET)

  find_package(Boost REQUIRED COMPONENTS filesystem)
  find_package(Metal REQUIRED)

  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ftemplate-backtrace-limit=0 -Wall -Wextra -Wno-unused-parameter -march=native")
  endif()
  if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -W4 -wd4100 -wd4127") # Disable warnings: unused parameter, conditional expression is constant
  endif()

  if(CMAKE_CUDA_FLAGS)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -ftemplate-backtrace-limit=0 --expt-extended-lambda --extended-lambda --expt-relaxed-constexpr")
    set(CMAKE_CUDA_FLAGS_DEBUG "${CMAKE_CUDA_FLAGS_DEBUG} -DDEBUG")

    set(CMAKE_CUDA_ARCHITECTURES OFF)
  endif()

  include("${TemplateTensors_CMAKE_DIR}/TemplateTensorsTargets.cmake")

  message(STATUS "Available TemplateTensors::interface.* TemplateTensors::interfaces:")
  if(TARGET TemplateTensors::interface.cudnn)
    message(STATUS "  Cudnn")
  endif()
  if(TARGET TemplateTensors::interface.cublas)
    message(STATUS "  Cublas")
  endif()
  if(TARGET TemplateTensors::interface.openmp)
    message(STATUS "  OpenMP")
  endif()
  if(TARGET TemplateTensors::interface.tbb)
    message(STATUS "  TBB")
  endif()
  if(TARGET TemplateTensors::interface.opencv)
    message(STATUS "  OpenCV")
  endif()
  if(TARGET TemplateTensors::interface.pcl)
    message(STATUS "  PCL")
  endif()
  if(TARGET TemplateTensors::interface.eigen)
    message(STATUS "  Eigen")
  endif()
  if(TARGET TemplateTensors::interface.tf2)
    message(STATUS "  tf2")
  endif()
  if(TARGET TemplateTensors::interface.tf)
    message(STATUS "  tf")
  endif()
  if(TARGET TemplateTensors::interface.freeimage)
    message(STATUS "  FreeImage")
  endif()
  if(TARGET TemplateTensors::interface.sensor_msgs)
    message(STATUS "  sensor_msgs")
  endif()
  if(TARGET TemplateTensors::interface.orocos_kdl)
    message(STATUS "  orocos_kdl")
  endif()
  if(TARGET TemplateTensors::interface.tinyply)
    message(STATUS "  tinyply")
  endif()
  if(TARGET TemplateTensors::interface.cnpy)
    message(STATUS "  cnpy")
  endif()
  if(TARGET TemplateTensors::interface.boost.python)
    message(STATUS "  boost.python")
  endif()
  if(TARGET TemplateTensors::interface.boost.numpy)
    message(STATUS "  boost.numpy")
  endif()
  if(TARGET TemplateTensors::interface.soil)
    message(STATUS "  SOIL")
  endif()
  if(TARGET TemplateTensors::interface.dlpack)
    message(STATUS "  DLPack")
  endif()
  if(TARGET TemplateTensors::interface.nvof)
    message(STATUS "  NVOF")
  endif()
  if(TARGET TemplateTensors::interface.cereal)
    message(STATUS "  Cereal")
  endif()
  if(TARGET TemplateTensors::interface.cppflow)
    message(STATUS "  CppFlow")
  endif()
  if(TARGET TemplateTensors::interface.g2o)
    message(STATUS "  g2o")
  endif()
endif()
